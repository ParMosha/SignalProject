import cv2
import numpy as np

class MOSSETracker:
    def __init__(self, learning_rate=0.125):
        self.learning_rate = learning_rate
        self.filter = None
        self.gaussian = None
        self.window_size = None
        self.position = None
        self.eps = 1e-5

    def _create_gaussian_response(self, size):
        h, w = size
        sigma = h / 8
        y, x = np.mgrid[-h//2:h//2, -w//2:w//2]
        return np.exp(-(x**2 + y**2) / (2 * sigma**2))

    def _preprocess(self, image):
        processed = np.log(image + 1)
        processed = (processed - processed.mean()) / (processed.std() + self.eps)
        window = np.outer(np.hanning(processed.shape[0]), np.hanning(processed.shape[1]))
        return processed * window

    def initialize(self, frame, bounding_box):
        x, y, w, h = bounding_box
        self.window_size = (w, h)
        self.position = (x + w//2, y + h//2)
        
        target = cv2.cvtColor(frame[y:y+h, x:x+w], cv2.COLOR_BGR2GRAY).astype(np.float32)
        self.gaussian = np.fft.fft2(self._create_gaussian_response((h, w)))
        
        preprocessed = self._preprocess(target)
        target_fft = np.fft.fft2(preprocessed)
        
        numerator = self.gaussian * np.conj(target_fft)
        denominator = target_fft * np.conj(target_fft) + self.eps
        self.filter = numerator / denominator
        
        for _ in range(8):
            angle = np.random.uniform(-5, 5)
            scale = np.random.uniform(0.95, 1.05)
            M = cv2.getRotationMatrix2D((w//2, h//2), angle, scale)
            warped = cv2.warpAffine(target, M, (w, h))
            
            warped_fft = np.fft.fft2(self._preprocess(warped))
            A = self.gaussian * np.conj(warped_fft)
            B = warped_fft * np.conj(warped_fft) + self.eps
            self.filter = (1 - self.learning_rate) * self.filter + self.learning_rate * (A / B)

    def update(self, frame):
        if self.filter is None:
            raise ValueError("Tracker not initialized")
            
        w, h = self.window_size
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY).astype(np.float32)
        region = cv2.getRectSubPix(gray, (w, h), self.position)
        
        preprocessed = self._preprocess(region)
        region_fft = np.fft.fft2(preprocessed)
        
        response = np.fft.ifft2(self.filter * region_fft)
        response = np.real(response)
        
        _, _, _, max_loc = cv2.minMaxLoc(response)
        dx, dy = max_loc[0] - w//2, max_loc[1] - h//2
        
        self.position = (self.position[0] + dx, self.position[1] + dy)
        
        x, y = int(self.position[0] - w//2), int(self.position[1] - h//2)
        new_target = gray[y:y+h, x:x+w]
        
        if new_target.shape[0] == h and new_target.shape[1] == w:
            new_target_fft = np.fft.fft2(self._preprocess(new_target))
            A = self.gaussian * np.conj(new_target_fft)
            B = new_target_fft * np.conj(new_target_fft) + self.eps
            self.filter = (1 - self.learning_rate) * self.filter + self.learning_rate * (A / B)
        
        return (x, y, w, h)

if __name__ == "__main__":
    video_capture = cv2.VideoCapture(0)
    ret, first_frame = video_capture.read()
    
    if not ret:
        print("Error reading video")
        exit()
    
    bbox = cv2.selectROI("Select Object", first_frame, False, False)
    cv2.destroyWindow("Select Object")
    
    tracker = MOSSETracker(learning_rate=0.1)
    tracker.initialize(first_frame, bbox)
    
    while True:
        ret, frame = video_capture.read()
        if not ret:
            break
            
        x, y, w, h = tracker.update(frame)
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.imshow("MOSSE Tracker", frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
            
    video_capture.release()
    cv2.destroyAllWindows()
